// Working generic function examples

// Simple identity function
fn id<T>(x: T) -> T {
    x
}

// Generic pair swap (without tuple return for now)
fn first<A, B>(a: A, b: B) -> A {
    a
}

fn second<A, B>(a: A, b: B) -> B {
    b
}

// Test calling generic functions
fn main() -> i32 {
    // Test identity
    let x = id(42);
    let y = id(true);
    
    // Test multiple type parameters
    let a = first(10, "hello");
    let b = second(10, "hello");
    
    // Nested generic calls
    let nested = id(id(id(100)));
    
    // Return success
    0
}