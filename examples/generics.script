// Basic generic function
fn identity<T>(x: T) -> T {
    x
}

// Generic function with trait bounds
fn clone_it<T: Clone>(x: T) -> T {
    x
}

// Multiple generic parameters
fn swap<T, U>(a: T, b: U) -> (U, T) {
    (b, a)
}

// Multiple trait bounds
fn process<T: Clone + Debug>(item: T) -> T {
    item
}

// Complex generic function
fn map<T, U>(items: Vec<T>, f: fn(T) -> U) -> Vec<U> {
    let result = []
    for item in items {
        result.push(f(item))
    }
    result
}

// Empty generic parameters (edge case)
fn weird<>() {
    print("This is weird but valid")
}

// Trailing comma (edge case)
fn another<T,>(x: T) -> T {
    x
}

// Using generic functions
fn main() {
    // Test identity function
    let x = identity(42)
    let s = identity("hello")
    
    // Test with different types
    let nums = Vec<i32>()
    let strings = Vec<String>()
    
    print("Generic functions work!")
}