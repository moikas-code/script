// Test various generic function call patterns
// Exercises type inference and monomorphization

// Simple generic functions
fn first<T, U>(x: T, y: U) -> T {
    return x;
}

fn second<T, U>(x: T, y: U) -> U {
    return y;
}

// Generic function that calls other generic functions
fn combine<A, B, C>(a: A, b: B, c: C) -> (A, C) {
    let x = first(a, b);  // Type inference: first<A, B>
    let y = second(b, c); // Type inference: second<B, C>
    return (x, y);
}

// Recursive generic function
fn factorial_generic<T: Mul + Sub + Eq + From<i32>>(n: T) -> T {
    if n.eq(&T::from(0)) {
        return T::from(1);
    } else {
        return n * factorial_generic(n - T::from(1));
    }
}

// Generic function with explicit type arguments
fn explicit_call_test() -> i32 {
    // Explicit type arguments
    let x = first::<i32, string>(42, "ignored");
    let y = second::<bool, f64>(true, 3.14);
    
    println("Explicit calls: x={}, y={}", x, y);
    return 0;
}

// Test type inference in complex expressions
fn inference_test() -> i32 {
    // Chain of generic calls
    let result = first(
        second(1, 2),
        first("hello", "world")
    );
    println("Chained result: {}", result);
    
    // Nested generic calls
    let nested = combine(
        first(10, 20),
        second(30, 40),
        first(50, 60)
    );
    println("Nested result: ({}, {})", nested.0, nested.1);
    
    return 0;
}

// Generic struct with methods that return generic types
struct Container<T> {
    value: T,
}

impl<T> Container<T> {
    fn new(value: T) -> Container<T> {
        return Container { value: value };
    }
    
    fn map<U, F: Fn(T) -> U>(self, f: F) -> Container<U> {
        return Container::new(f(self.value));
    }
    
    fn and_then<U, F: Fn(T) -> Container<U>>(self, f: F) -> Container<U> {
        return f(self.value);
    }
}

fn container_test() -> i32 {
    // Test generic method chaining
    let container = Container::new(42);
    
    let mapped = container
        .map(|x| x * 2)
        .map(|x| x + 10)
        .map(|x| format("Result: {}", x));
    
    println("Mapped container: {}", mapped.value);
    
    // Test monadic bind
    let result = Container::new(10)
        .and_then(|x| Container::new(x * 2))
        .and_then(|x| Container::new(x + 5));
    
    println("Monadic result: {}", result.value);
    
    return 0;
}

fn main() -> i32 {
    println("=== Generic Call Patterns Test ===");
    
    // Basic calls
    let x = first(100, "ignored");
    let y = second("ignored", 200);
    println("Basic: first={}, second={}", x, y);
    
    // Combined calls
    let (a, b) = combine(1, 2, 3);
    println("Combined: ({}, {})", a, b);
    
    // Run sub-tests
    explicit_call_test();
    inference_test();
    container_test();
    
    // Test factorial (if multiplication trait is implemented)
    // let fact5 = factorial_generic(5);
    // println("Factorial of 5: {}", fact5);
    
    println("=== All tests completed ===");
    return 0;
}