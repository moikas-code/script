// vector.script - 2D vector math utilities

export { Vec2 }

struct Vec2 {
    x: float,
    y: float
}

impl Vec2 {
    fn new(x: float, y: float) -> Vec2 {
        Vec2 { x: x, y: y }
    }
    
    fn zero() -> Vec2 {
        Vec2 { x: 0.0, y: 0.0 }
    }
    
    fn one() -> Vec2 {
        Vec2 { x: 1.0, y: 1.0 }
    }
    
    fn add(self, other: Vec2) -> Vec2 {
        Vec2::new(self.x + other.x, self.y + other.y)
    }
    
    fn subtract(self, other: Vec2) -> Vec2 {
        Vec2::new(self.x - other.x, self.y - other.y)
    }
    
    fn scale(self, scalar: float) -> Vec2 {
        Vec2::new(self.x * scalar, self.y * scalar)
    }
    
    fn dot(self, other: Vec2) -> float {
        self.x * other.x + self.y * other.y
    }
    
    fn length(self) -> float {
        sqrt(self.x * self.x + self.y * self.y)
    }
    
    fn lengthSquared(self) -> float {
        self.x * self.x + self.y * self.y
    }
    
    fn normalize(self) -> Vec2 {
        let len = self.length()
        if len == 0.0 {
            Vec2::zero()
        } else {
            self.scale(1.0 / len)
        }
    }
    
    fn distance(self, other: Vec2) -> float {
        self.subtract(other).length()
    }
    
    fn lerp(self, other: Vec2, t: float) -> Vec2 {
        self.add(other.subtract(self).scale(t))
    }
}

// Placeholder
fn sqrt(x: float) -> float { x }