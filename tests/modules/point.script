// point.script - 2D and 3D point utilities

export { Point2D, Point3D, distance2D, distance3D, origin2D, origin3D }

// 2D Point
struct Point2D {
    x: float,
    y: float
}

fn Point2D(x: float, y: float) -> Point2D {
    Point2D { x: x, y: y }
}

// 3D Point
struct Point3D {
    x: float,
    y: float,
    z: float
}

fn Point3D(x: float, y: float, z: float) -> Point3D {
    Point3D { x: x, y: y, z: z }
}

// Calculate distance between two 2D points
fn distance2D(p1: Point2D, p2: Point2D) -> float {
    let dx = p2.x - p1.x
    let dy = p2.y - p1.y
    sqrt(dx * dx + dy * dy)
}

// Calculate distance between two 3D points
fn distance3D(p1: Point3D, p2: Point3D) -> float {
    let dx = p2.x - p1.x
    let dy = p2.y - p1.y
    let dz = p2.z - p1.z
    sqrt(dx * dx + dy * dy + dz * dz)
}

// Helper function for square root (placeholder)
fn sqrt(x: float) -> float {
    // Placeholder - in real implementation would calculate square root
    x
}

// Predefined origin points
let origin2D = Point2D(0.0, 0.0)
let origin3D = Point3D(0.0, 0.0, 0.0)